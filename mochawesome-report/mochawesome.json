{
  "stats": {
    "suites": 1,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-07T14:17:11.407Z",
    "end": "2024-09-07T14:17:11.482Z",
    "duration": 75,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "29e97227-27a9-449b-b8c8-0bab72198949",
      "title": "",
      "fullFile": "/Users/faisalkhatri/Github/restful-ecommerce/test/unit-tests.spec.js",
      "file": "/test/unit-tests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b85e71d3-ba13-4c7a-8089-7a428381add1",
          "title": "Unit Tests of E-Commerce application",
          "fullFile": "/Users/faisalkhatri/Github/restful-ecommerce/test/unit-tests.spec.js",
          "file": "/test/unit-tests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 404 as no order exists",
              "fullTitle": "Unit Tests of E-Commerce application should return status code 404 as no order exists",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getAllOrders');\nexpect(response.statusCode).to.be.equal(404)\nexpect(response.body.message).to.be.equal('No Order found!!');",
              "err": {},
              "uuid": "93e779c0-4038-4f4c-ac31-7426197eef5f",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status code 400 for invalid order format",
              "fullTitle": "Unit Tests of E-Commerce application should return status code 400 for invalid order format",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).post('/addOrder').send(orderObject);\n\t\texpect(response.statusCode).to.be.equal(400)\n\t\texpect(response.body.message).to.be.equal('Request Payload must be an array of orders!');",
              "err": {},
              "uuid": "7e712f69-4039-40ef-b69f-8b454297b237",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status code 400 with message for fields missing in order",
              "fullTitle": "Unit Tests of E-Commerce application should return status code 400 with message for fields missing in order",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).post('/addOrder').send(missingFieldsOrder);\n\t\texpect(response.statusCode).to.be.equal(400)\n\t\texpect(response.body.message).to.be.equal('Each order must have user_id, product_id, product_name, product_amount, qty, tax_amt, and total_amt!');",
              "err": {},
              "uuid": "776d86ae-daa7-4e70-bef5-6c975cbccf2c",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create orders and return status code 201",
              "fullTitle": "Unit Tests of E-Commerce application should create orders and return status code 201",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).post('/addOrder').send(orders);\n\t\texpect(response.statusCode).to.be.equal(201)\n\t\texpect(response.body.message).to.be.equal('Orders added successfully!');\n\t\texpect(response.body.orders[0].id).not.to.be.null;\n\t\texpect(response.body.orders.length).to.be.equal(4);\n\t\texpect(response.body.orders[1].product_name).to.be.equal('iPad');\n\t\texpect(response.body.orders[1].product_amount).to.be.equal(699);\n\t\texpect(response.body.orders[1].qty).to.be.equal(1);\n\t\texpect(response.body.orders[1].tax_amt).to.be.equal(7.99);\n\t\texpect(response.body.orders[1].total_amt).to.be.equal(706.99);",
              "err": {},
              "uuid": "7b9ac225-666d-4326-898a-68ad11478d89",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all available orders successfully with status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should get all available orders successfully with status code 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getAllOrders');\n\texpect(response.statusCode).to.be.equal(200);\n\texpect(response.body.message).to.be.equal('Orders fetched successfully!');\n\texpect(response.body.orders.length).to.be.equal(4);\n\texpect(response.body.orders[0].user_id).to.be.equal('1');\n\texpect(response.body.orders[0].product_id).to.be.equal('1');\n\texpect(response.body.orders[0].product_name).to.be.equal('iPhone');\n\texpect(response.body.orders[0].product_amount).to.be.equal(500);\n\texpect(response.body.orders[0].qty).to.be.equal(1);\n\texpect(response.body.orders[0].tax_amt).to.be.equal(5.99);\n\texpect(response.body.orders[0].total_amt).to.be.equal(505.99);",
              "err": {},
              "uuid": "127b46c1-066a-4eaf-afc8-daf0cda573a8",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter and fetch order on order id with status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should filter and fetch order on order id with status code 200",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({id: 1});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.message).to.be.equal('Order found!!');\nexpect(response.body.orders.length).to.be.above(0);\nexpect(response.body.orders[0].user_id).to.be.equal('1');\nexpect(response.body.orders[0].product_id).to.be.equal('1');\nexpect(response.body.orders[0].product_name).to.be.equal('iPhone');\nexpect(response.body.orders[0].product_amount).to.be.equal(500);\nexpect(response.body.orders[0].qty).to.be.equal(1);\nexpect(response.body.orders[0].tax_amt).to.be.equal(5.99);\nexpect(response.body.orders[0].total_amt).to.be.equal(505.99);",
              "err": {},
              "uuid": "bb1f3a9a-3d7e-48fb-b6f0-c0f2afb2bfab",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter and fetch order on product_id with status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should filter and fetch order on product_id with status code 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({product_id: 3});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.message).to.be.equal('Order found!!');\nexpect(response.body.orders.length).to.be.above(0);\nexpect(response.body.orders[0].user_id).to.be.equal('3');\nexpect(response.body.orders[0].product_id).to.be.equal('3');\nexpect(response.body.orders[0].product_name).to.be.equal('Samsung S24 Ultra');\nexpect(response.body.orders[0].product_amount).to.be.equal(4300);\nexpect(response.body.orders[0].qty).to.be.equal(1);\nexpect(response.body.orders[0].tax_amt).to.be.equal(5.99);\nexpect(response.body.orders[0].total_amt).to.be.equal(4305.99);",
              "err": {},
              "uuid": "6dbfed89-9c2e-4a77-8e92-e9a73b43ef20",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter and fetch order on user_id with status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should filter and fetch order on user_id with status code 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({user_id: 1});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.message).to.be.equal('Order found!!');\nexpect(response.body.orders.length).to.be.above(0);\nexpect(response.body.orders[1].user_id).to.be.equal('1');\nexpect(response.body.orders[1].product_id).to.be.equal('2');\nexpect(response.body.orders[1].product_name).to.be.equal('iPad');\nexpect(response.body.orders[1].product_amount).to.be.equal(699);\nexpect(response.body.orders[1].qty).to.be.equal(1);\nexpect(response.body.orders[1].tax_amt).to.be.equal(7.99);\nexpect(response.body.orders[1].total_amt).to.be.equal(706.99);",
              "err": {},
              "uuid": "3e1bb021-b728-4304-9e66-7ca158c4b49b",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 status code when query no records are found for the order id filter",
              "fullTitle": "Unit Tests of E-Commerce application should return 404 status code when query no records are found for the order id filter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({id: 6});\nexpect(response.statusCode).to.be.equal(404);\nexpect(response.body.message).to.be.equal('No Order found with the given parameters!');",
              "err": {},
              "uuid": "20ebee1f-7769-4184-900b-b48777440683",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 status code when query no records are found for the user id filter",
              "fullTitle": "Unit Tests of E-Commerce application should return 404 status code when query no records are found for the user id filter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({user_id: 6});\nexpect(response.statusCode).to.be.equal(404);\nexpect(response.body.message).to.be.equal('No Order found with the given parameters!');",
              "err": {},
              "uuid": "94850078-dd7e-4a07-bce3-2787506bcd05",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 status code when query no records are found for the product id filter",
              "fullTitle": "Unit Tests of E-Commerce application should return 404 status code when query no records are found for the product id filter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({product_id: 6});\nexpect(response.statusCode).to.be.equal(404);\nexpect(response.body.message).to.be.equal('No Order found with the given parameters!');",
              "err": {},
              "uuid": "162831cd-ebed-43ee-836a-a1030a3de6a8",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the order with multiple filter queries with status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should return the order with multiple filter queries with status code 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({id: 3, user_id: 2, product_id: 2});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.message).to.be.equal('Order found!!');\nexpect(response.body.orders.length).to.be.above(0);\nexpect(response.body.orders[0].id).to.be.equal(3);\nexpect(response.body.orders[0].user_id).to.be.equal('2');\nexpect(response.body.orders[0].product_id).to.be.equal('2');\nexpect(response.body.orders[0].product_name).to.be.equal('iPhone 15 PRO');\nexpect(response.body.orders[0].product_amount).to.be.equal(999);\nexpect(response.body.orders[0].qty).to.be.equal(2);\nexpect(response.body.orders[0].tax_amt).to.be.equal(9.99);\nexpect(response.body.orders[0].total_amt).to.be.equal(1088.99);",
              "err": {},
              "uuid": "355a3a47-3605-4582-ab1c-05fed62dbecd",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status code 404 and not return any order when multiple filter query params dont match",
              "fullTitle": "Unit Tests of E-Commerce application should return status code 404 and not return any order when multiple filter query params dont match",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request(baseurl).get('/getOrder').query({id: 1, user_id: 3, product_id: 2});\nexpect(response.statusCode).to.be.equal(404);\nexpect(response.body.message).to.be.equal('No Order found with the given parameters!');",
              "err": {},
              "uuid": "2d5e3401-4502-438a-b77f-90671bc4dd99",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the valid token with status code 201 ",
              "fullTitle": "Unit Tests of E-Commerce application should generate the valid token with status code 201 ",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send(authCredentials);\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.message).to.be.equal('Authentication Successful!');\nexpect(response.body.token).not.to.be.null;",
              "err": {},
              "uuid": "e6cc0d03-e452-40d1-a2b2-4e99ef0de5bf",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 401 when invalid credentials are supplied ",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 401 when invalid credentials are supplied ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({username: \"admin\", password: \"Password123\"});\nexpect(response.statusCode).to.be.equal(401);\nexpect(response.body.message).to.be.equal('Authentication Failed! Invalid username or password!');",
              "err": {},
              "uuid": "64b00866-a159-4ead-bc48-0133ea38c793",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 401 when only username is provided and password is missing",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 401 when only username is provided and password is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({username: \"admin\"});\nexpect(response.statusCode).to.be.equal(400);\nexpect(response.body.message).to.be.equal('Username and Password is required for authentication!');",
              "err": {},
              "uuid": "1c128977-5a05-45e8-9d4b-d76b1a5e9866",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 400 when only password is provided and username is missing",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 400 when only password is provided and username is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({password: \"pass123\"});\nexpect(response.statusCode).to.be.equal(400);\nexpect(response.body.message).to.be.equal('Username and Password is required for authentication!');",
              "err": {},
              "uuid": "a2ea07d6-f69d-415b-ba27-592b4edeefa7",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 401 when username is blank",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 401 when username is blank",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({username: \"blank\", password: \"admin\"});\nexpect(response.statusCode).to.be.equal(401);\nexpect(response.body.message).to.be.equal('Authentication Failed! Invalid username or password!');",
              "err": {},
              "uuid": "2eba14a7-2a13-4e56-b04b-d39c2e893cd2",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 401 when password is blank",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 401 when password is blank",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({username: \"admin\", password: \"blank\"});\nexpect(response.statusCode).to.be.equal(401);\nexpect(response.body.message).to.be.equal('Authentication Failed! Invalid username or password!');",
              "err": {},
              "uuid": "617a520a-3a97-4e8b-a2ce-fe3d0f3c8395",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate the token and return status code 401 when both username and password is blank",
              "fullTitle": "Unit Tests of E-Commerce application should not generate the token and return status code 401 when both username and password is blank",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).post('/auth').send({username: \"blank\", password: \"blank\"});\nexpect(response.statusCode).to.be.equal(401);\nexpect(response.body.message).to.be.equal('Authentication Failed! Invalid username or password!');",
              "err": {},
              "uuid": "66d004d5-8a2e-45ad-8104-da636d2d4ce3",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the order successfully and return status code 200",
              "fullTitle": "Unit Tests of E-Commerce application should update the order successfully and return status code 200",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\n\t\n\t\tlet response = await request (baseurl).put('/updateOrder/2')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Authorization', authResponse.body.token)\n\t\t.send(updateOrder);\n\t\texpect(response.statusCode).to.be.equal(200);\n\t\texpect(response.body.message).to.be.equal('Order updated successfully!');\n\t\texpect(response.body.order.user_id).to.be.equal('3');\n\t\texpect(response.body.order.product_id).to.be.equal('7');\n\t\texpect(response.body.order.product_name).to.be.equal('Samsung Android Television');\n\t\texpect(response.body.order.product_amount).to.be.equal(8559.89);\n\t\texpect(response.body.order.qty).to.be.equal(3);\n\t\texpect(response.body.order.tax_amt).to.be.equal(1283.98);\n\t\texpect(response.body.order.total_amt).to.be.equal(26960.98);",
              "err": {},
              "uuid": "b16d1caa-bef9-4e0b-86af-60839d6ed0a6",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when order with the given id is not found for update",
              "fullTitle": "Unit Tests of E-Commerce application should return 404 when order with the given id is not found for update",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\n\t\tlet response = await request (baseurl).put('/updateOrder/90')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Authorization', authResponse.body.token)\n\t\t.send(updateOrder);\n\t\texpect(response.statusCode).to.be.equal(404);\n\t\texpect(response.body.message).to.be.equal('No Order found with the given Order Id!');",
              "err": {},
              "uuid": "b9c46d5d-9dda-4757-a2aa-027e5700ec91",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the order when authorization token is missing in the update request and return status code 403",
              "fullTitle": "Unit Tests of E-Commerce application should not update the order when authorization token is missing in the update request and return status code 403",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).put('/updateOrder/2').send(updateOrder);\n\t\texpect(response.statusCode).to.be.equal(403);\n\t\texpect(response.body.message).to.be.equal('Forbidden! Token is missing!');",
              "err": {},
              "uuid": "36e9923d-972a-4e4e-a1c6-17d6f2526517",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the order when authorization token is invalid and return status code 400",
              "fullTitle": "Unit Tests of E-Commerce application should not update the order when authorization token is invalid and return status code 400",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).put('/updateOrder/2')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Authorization', 'invalidtokenuyiy234sdf')\n\t\t.send(updateOrder);\n\t\texpect(response.statusCode).to.be.equal(400);\n\t\texpect(response.body.message).to.be.equal('Failed to authenticate token!');",
              "err": {},
              "uuid": "59ec36ee-1e63-49d6-ba8e-f3680570ae67",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the order when a field is missing from request body and return status code 400",
              "fullTitle": "Unit Tests of E-Commerce application should not update the order when a field is missing from request body and return status code 400",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\nlet response = await request (baseurl).put('/updateOrder/2')\n.set('Content-Type', 'application/json')\n.set('Authorization', authResponse.body.token)\n.send(missingFieldInUpdateOrder);\nexpect(response.statusCode).to.be.equal(400);\nexpect(response.body.message).to.be.equal('Each Order must have user_id, product_id, product_name, product_amount, qty, tax_amt, and total_amt!');",
              "err": {},
              "uuid": "ade47b70-8686-475b-ab2d-310a5e85315d",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the order partially and return status code 200 ",
              "fullTitle": "Unit Tests of E-Commerce application should update the order partially and return status code 200 ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\nlet response = await request (baseurl).patch('/partialUpdateOrder/2')\n.set('Content-Type', 'application/json')\n.set('Authorization', authResponse.body.token)\n.send({\"tax_amt\": 60.77, \"total_amt\": 25740.44});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.message).to.be.equal('Order updated successfully!');\nexpect(response.body.order.user_id).to.be.equal('3');\nexpect(response.body.order.product_id).to.be.equal('7');\nexpect(response.body.order.product_name).to.be.equal('Samsung Android Television');\nexpect(response.body.order.product_amount).to.be.equal(8559.89);\nexpect(response.body.order.qty).to.be.equal(3);\nexpect(response.body.order.tax_amt).to.be.equal(60.77);\nexpect(response.body.order.total_amt).to.be.equal(25740.44);",
              "err": {},
              "uuid": "e8895707-efee-4f41-ae71-a3a20761a49e",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when order with the given id is not found for partial update",
              "fullTitle": "Unit Tests of E-Commerce application should return 404 when order with the given id is not found for partial update",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\n\t\tlet response = await request (baseurl).patch('/partialUpdateOrder/90')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Authorization', authResponse.body.token)\n\t\t.send({\"tax_amt\": 60.77, \"total_amt\": 25740.44});\n\t\texpect(response.statusCode).to.be.equal(404);\n\t\texpect(response.body.message).to.be.equal('No Order found with the given Order Id!');",
              "err": {},
              "uuid": "9e6e6c8d-9a3e-4efa-814b-0e8a84e5af02",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the partial order when authorization token is missing in the update request and return status code 403",
              "fullTitle": "Unit Tests of E-Commerce application should not update the partial order when authorization token is missing in the update request and return status code 403",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).patch('/partialUpdateOrder/3').send({\"user_id\": 5});\n\t\texpect(response.statusCode).to.be.equal(403);\n\t\texpect(response.body.message).to.be.equal('Forbidden! Token is missing!');",
              "err": {},
              "uuid": "d87d991f-de54-4a5c-891f-ab51038523b3",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the partial order when authorization token is invalid and return status code 400",
              "fullTitle": "Unit Tests of E-Commerce application should not update the partial order when authorization token is invalid and return status code 400",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).patch('/partialUpdateOrder/3')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Authorization', 'invalidtokenuyiy234sdf')\n\t\t.send({\"total_amt\": 25500.99});\n\t\texpect(response.statusCode).to.be.equal(400);\n\t\texpect(response.body.message).to.be.equal('Failed to authenticate token!');",
              "err": {},
              "uuid": "cb02f27d-6555-4360-8afe-3acf291b2f76",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update the partial order when no data is provided in the request body, and return status code 400",
              "fullTitle": "Unit Tests of E-Commerce application should not update the partial order when no data is provided in the request body, and return status code 400",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\nlet response = await request (baseurl).patch('/partialUpdateOrder/3')\n.set('Content-Type', 'application/json')\n.set('Authorization', authResponse.body.token)\n.send({ });\nexpect(response.statusCode).to.be.equal(400);\nexpect(response.body.message).to.be.equal('Invalid request, no data provided to update!');",
              "err": {},
              "uuid": "7d9f209b-0f98-4dd9-a2db-42be2ecf9a22",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order with correct order id and valid token and return status code 204",
              "fullTitle": "Unit Tests of E-Commerce application should delete an order with correct order id and valid token and return status code 204",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\nlet response = await request (baseurl).delete('/deleteOrder/4')\n.set('Authorization', authResponse.body.token);\n\nexpect(response.statusCode).to.be.equal(204);",
              "err": {},
              "uuid": "47c58d7c-26d7-427c-bd10-3f48db9cf64a",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete an order and return status code 403 when authorization token is missing in the header",
              "fullTitle": "Unit Tests of E-Commerce application should not delete an order and return status code 403 when authorization token is missing in the header",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).delete('/deleteOrder/2');\n\t\texpect(response.statusCode).to.be.equal(403);\n\t\texpect(response.body.message).to.be.equal('Forbidden! Token is missing!');",
              "err": {},
              "uuid": "42db0da3-cc15-4678-8f21-146edcca73f9",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete an order and return status code 400 when authorization token is in invalid format",
              "fullTitle": "Unit Tests of E-Commerce application should not delete an order and return status code 400 when authorization token is in invalid format",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await request (baseurl).delete('/deleteOrder/2')\n\t\t.set('Authorization', 'invalidtokenuyiy234sdf')\n\t\texpect(response.statusCode).to.be.equal(400);\n\t\texpect(response.body.message).to.be.equal('Failed to authenticate token!');",
              "err": {},
              "uuid": "1d687263-82dc-47f0-9724-f6b519b6f628",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete an order and return status code 404 when no order is found for the order id",
              "fullTitle": "Unit Tests of E-Commerce application should not delete an order and return status code 404 when no order is found for the order id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let authResponse = await request (baseurl).post('/auth').send(authCredentials);\n\t\tlet response = await request (baseurl).delete('/deleteOrder/50')\n\t\t.set('Authorization', authResponse.body.token);\n\t\texpect(response.statusCode).to.be.equal(404);\n\t\texpect(response.body.message).to.be.equal('No Order found with the given Order Id!');",
              "err": {},
              "uuid": "76d7bcdc-a7e6-4593-a002-699e14944cba",
              "parentUUID": "b85e71d3-ba13-4c7a-8089-7a428381add1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93e779c0-4038-4f4c-ac31-7426197eef5f",
            "7e712f69-4039-40ef-b69f-8b454297b237",
            "776d86ae-daa7-4e70-bef5-6c975cbccf2c",
            "7b9ac225-666d-4326-898a-68ad11478d89",
            "127b46c1-066a-4eaf-afc8-daf0cda573a8",
            "bb1f3a9a-3d7e-48fb-b6f0-c0f2afb2bfab",
            "6dbfed89-9c2e-4a77-8e92-e9a73b43ef20",
            "3e1bb021-b728-4304-9e66-7ca158c4b49b",
            "20ebee1f-7769-4184-900b-b48777440683",
            "94850078-dd7e-4a07-bce3-2787506bcd05",
            "162831cd-ebed-43ee-836a-a1030a3de6a8",
            "355a3a47-3605-4582-ab1c-05fed62dbecd",
            "2d5e3401-4502-438a-b77f-90671bc4dd99",
            "e6cc0d03-e452-40d1-a2b2-4e99ef0de5bf",
            "64b00866-a159-4ead-bc48-0133ea38c793",
            "1c128977-5a05-45e8-9d4b-d76b1a5e9866",
            "a2ea07d6-f69d-415b-ba27-592b4edeefa7",
            "2eba14a7-2a13-4e56-b04b-d39c2e893cd2",
            "617a520a-3a97-4e8b-a2ce-fe3d0f3c8395",
            "66d004d5-8a2e-45ad-8104-da636d2d4ce3",
            "b16d1caa-bef9-4e0b-86af-60839d6ed0a6",
            "b9c46d5d-9dda-4757-a2aa-027e5700ec91",
            "36e9923d-972a-4e4e-a1c6-17d6f2526517",
            "59ec36ee-1e63-49d6-ba8e-f3680570ae67",
            "ade47b70-8686-475b-ab2d-310a5e85315d",
            "e8895707-efee-4f41-ae71-a3a20761a49e",
            "9e6e6c8d-9a3e-4efa-814b-0e8a84e5af02",
            "d87d991f-de54-4a5c-891f-ab51038523b3",
            "cb02f27d-6555-4360-8afe-3acf291b2f76",
            "7d9f209b-0f98-4dd9-a2db-42be2ecf9a22",
            "47c58d7c-26d7-427c-bd10-3f48db9cf64a",
            "42db0da3-cc15-4678-8f21-146edcca73f9",
            "1d687263-82dc-47f0-9724-f6b519b6f628",
            "76d7bcdc-a7e6-4593-a002-699e14944cba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 64,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}